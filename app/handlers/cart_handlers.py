from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from app.keyboards.main_kb import get_main_keyboard
from app.keyboards.inline_kb import get_item_action_kb
from app.models.database import get_db_session, User, CartItem, Item
import logging

logger = logging.getLogger(__name__)
cart_router = Router()

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@cart_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    logger.info("–ö–Ω–æ–ø–∫–∞ –ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞–∂–∞—Ç–∞!")
    print("DEBUG: –ö–Ω–æ–ø–∫–∞ –ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞–∂–∞—Ç–∞!")
    
    session = get_db_session()
    try:
        user = session.query(User).filter(User.tg_id == message.from_user.id).first()
        print(f"DEBUG: User found: {user}")
        
        if not user or not user.cart:
            print("DEBUG: Cart is empty")
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚òï")
            return
        
        print(f"DEBUG: Cart items: {len(user.cart)}")
        
        total = 0
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        
        for i, cart_item in enumerate(user.cart, 1):
            item_total = cart_item.item.price * cart_item.quantity
            cart_text += f"{i}. {cart_item.item.name} x{cart_item.quantity} - {int(item_total)}‚ÇΩ\n"
            total += item_total
        
        cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: {int(total)}‚ÇΩ"
        print(f"DEBUG: Cart text: {cart_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
        cart_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
                [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        print("DEBUG: Sending message...")
        await message.answer(cart_text, reply_markup=cart_keyboard, parse_mode="HTML")
        print("DEBUG: Message sent successfully!")
        
    except Exception as e:
        logger.error(f"Error in show_cart: {e}")
        print(f"ERROR in show_cart: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
    finally:
        session.close()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
@cart_router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders_placeholder(message: Message):
    await message.answer("üì¶ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@cart_router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
@cart_router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    session = get_db_session()
    try:
        item_id = int(callback.data.split("_")[1])
        
        user = session.query(User).filter(User.tg_id == callback.from_user.id).first()
        item = session.query(Item).filter(Item.id == item_id).first()
        
        if not user or not item:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item = session.query(CartItem).filter(
            CartItem.user_id == user.id,
            CartItem.item_id == item_id
        ).first()
        
        if cart_item:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_item.quantity += 1
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_cart_item = CartItem(user_id=user.id, item_id=item_id, quantity=1)
            session.add(new_cart_item)
        
        session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
        text = f"<b>{item.name}</b>\n\n{item.description}\n\n–¶–µ–Ω–∞: <b>{int(item.price)}‚ÇΩ</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_item_action_kb(item_id, True)
        )
        
        await callback.answer(f"‚úÖ {item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        
    except Exception as e:
        session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
        print(f"Error adding to cart: {e}")
    finally:
        session.close()

# –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@cart_router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery):
    session = get_db_session()
    try:
        item_id = int(callback.data.split("_")[1])
        user = session.query(User).filter(User.tg_id == callback.from_user.id).first()
        item = session.query(Item).filter(Item.id == item_id).first()
        
        if not user or not item:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cart_item = session.query(CartItem).filter(
            CartItem.user_id == user.id,
            CartItem.item_id == item_id
        ).first()
        
        if cart_item:
            session.delete(cart_item)
            session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            text = f"<b>{item.name}</b>\n\n{item.description}\n\n–¶–µ–Ω–∞: <b>{int(item.price)}‚ÇΩ</b>"
            await callback.message.edit_text(
                text,
                reply_markup=get_item_action_kb(item_id, False)
            )
            
            await callback.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            
    except Exception as e:
        session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        print(f"Error removing from cart: {e}")
    finally:
        session.close()