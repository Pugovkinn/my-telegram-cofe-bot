from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from app.keyboards.main_kb import get_main_keyboard
from app.models.database import get_db_session, User, CartItem, Order
from app.utils.states import OrderState
from app.services.payment_service import payment_service

order_router = Router()

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@order_router.message(F.text == "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    session = get_db_session()
    try:
        user = session.query(User).filter(User.tg_id == message.from_user.id).first()
        
        if not user or not user.cart:
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total = sum(item.item.price * item.quantity for item in user.cart)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(total=total, user_id=user.id)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è
        delivery_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöó –î–æ—Å—Ç–∞–≤–∫–∞")],
                [KeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"üõí –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É: {int(total)}‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
            reply_markup=delivery_kb
        )
        await state.set_state(OrderState.choosing_delivery)
        
    finally:
        session.close()

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@order_router.message(OrderState.choosing_delivery, F.text.in_(["üöó –î–æ—Å—Ç–∞–≤–∫–∞", "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑"]))
async def choose_delivery(message: Message, state: FSMContext):
    delivery_type = "–¥–æ—Å—Ç–∞–≤–∫–∞" if message.text == "üöó –î–æ—Å—Ç–∞–≤–∫–∞" else "—Å–∞–º–æ–≤—ã–≤–æ–∑"
    await state.update_data(delivery_type=delivery_type)
    
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=phone_kb
    )
    await state.set_state(OrderState.entering_phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@order_router.message(OrderState.entering_phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    total = data['total']
    delivery_type = data['delivery_type']
    
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"üíµ –°—É–º–º–∞: {int(total)}‚ÇΩ\n"
        f"üöö –°–ø–æ—Å–æ–±: {delivery_type}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
        reply_markup=confirm_kb,
        parse_mode="HTML"
    )
    await state.set_state(OrderState.confirming_order)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@order_router.message(OrderState.confirming_order, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def confirm_order(message: Message, state: FSMContext):
    session = get_db_session()
    try:
        data = await state.get_data()
        user_id = data['user_id']
        total = data['total']
        delivery_type = data['delivery_type']
        phone = data['phone']
        
        user = session.query(User).filter(User.id == user_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        order_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name}\n"
        order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        order_text += f"üöö –°–ø–æ—Å–æ–±: {delivery_type}\n\n"
        order_text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        
        for i, item in enumerate(user.cart, 1):
            order_text += f"{i}. {item.item.name} x{item.quantity} - {int(item.item.price * item.quantity)}‚ÇΩ\n"
        
        order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {int(total)}‚ÇΩ"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        new_order = Order(
            user_id=user.id,
            amount=total,
            status='–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            items=order_text,
            created_at=datetime.utcnow()
        )
        session.add(new_order)
        session.commit()
        
        # –î–ï–ú–û-–†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂
        payment = await payment_service.create_payment(
            amount=1.00,  # –í—Å–µ–≥–æ 1 —Ä—É–±–ª—å –¥–ª—è –¥–µ–º–æ
            description=f"–î–µ–º–æ-–∑–∞–∫–∞–∑ #{new_order.id}",
            order_id=new_order.id
        )
        
        if payment:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∑–∞–∫–∞–∑–µ
            new_order.payment_id = payment['id']
            session.commit()
            
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{new_order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üíµ –ö –æ–ø–ª–∞—Ç–µ: 1‚ÇΩ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)\n\n"
                "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=payment_service.get_demo_payment_keyboard(new_order.id),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()
        
    except Exception as e:
        session.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        print(f"Order error: {e}")
    finally:
        session.close()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–º–æ-–æ–ø–ª–∞—Ç—ã
@order_router.callback_query(F.data.startswith("demo_pay_"))
async def process_demo_payment(callback: CallbackQuery):
    await callback.answer("üí≥ –î–µ–º–æ-–ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'")

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@order_router.message(StateFilter(OrderState), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )
    
# ============================================================
# –î–ï–ú–û-–°–¢–†–ê–ù–ò–¶–ê –û–ü–õ–ê–¢–´ (–ö–†–ê–°–ò–í–ê–Ø –í–ï–†–°–ò–Ø)
# ============================================================

@order_router.callback_query(F.data.startswith("demo_page_"))
async def show_demo_payment_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã"""
    order_id = callback.data.split("_")[2]
    
    demo_text = """
üí≥ <b>–î–ï–ú–û-–°–¢–†–ê–ù–ò–¶–ê –û–ü–õ–ê–¢–´</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üè™ <b>CoffeeBot 24/7</b>
üìç –ó–∞–∫–∞–∑ #{} ¬∑ 1‚ÇΩ

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   üí≥ –û–ü–õ–ê–¢–ê    ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  –ö–∞—Ä—Ç–∞: ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ 4444  ‚îÇ
‚îÇ  –°—É–º–º–∞: 1‚ÇΩ       ‚îÇ
‚îÇ  –°—Ç–∞—Ç—É: –û–∂–∏–¥–∞–Ω–∏–µ  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üîπ <b>–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>
üîπ –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã
   –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa/CloudPayments
üîπ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
    """.format(order_id)
    
    demo_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É", 
            callback_data=f"demo_pay_success_{order_id}"
        )],
        [InlineKeyboardButton(
            text="‚ùå –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –æ–ø–ª–∞—Ç—ã", 
            callback_data=f"demo_pay_fail_{order_id}"
        )],
        [InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç", 
            callback_data=f"back_to_bot_{order_id}"
        )]
    ])
    
    try:
        await callback.message.edit_text(
            demo_text, 
            reply_markup=demo_kb, 
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.answer(
            demo_text, 
            reply_markup=demo_kb, 
            parse_mode="HTML"
        )
    await callback.answer()

@order_router.callback_query(F.data.startswith("demo_pay_success_"))
async def process_demo_payment_success(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –¥–µ–º–æ-–æ–ø–ª–∞—Ç—ã"""
    order_id = callback.data.split("_")[3]
    
    success_text = """
‚úÖ <b>–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù!</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí≥ –°—É–º–º–∞: <b>1‚ÇΩ</b>
üì¶ –ó–∞–∫–∞–∑: <b>#{}</b>
üïí –í—Ä–µ–º—è: <b>{}</b>
üî¢ –ö–æ–¥: <b>APPROVED</b>

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç
–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """.format(order_id, datetime.now().strftime("%H:%M:%S"))
    
    success_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç", 
            callback_data=f"back_to_bot_{order_id}"
        )]
    ])
    
    await callback.message.edit_text(
        success_text, 
        reply_markup=success_kb, 
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

@order_router.callback_query(F.data.startswith("demo_pay_fail_"))
async def process_demo_payment_fail(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –¥–µ–º–æ-–æ–ø–ª–∞—Ç—ã"""
    order_id = callback.data.split("_")[3]
    
    fail_text = """
‚ùå <b>–û–®–ò–ë–ö–ê –û–ü–õ–ê–¢–´</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí≥ –°—É–º–º–∞: <b>1‚ÇΩ</b>
üì¶ –ó–∞–∫–∞–∑: <b>#{}</b>
üïí –í—Ä–µ–º—è: <b>{}</b>
üî¢ –ö–æ–¥: <b>DECLINED</b>

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫.
    """.format(order_id, datetime.now().strftime("%H:%M:%S"))
    
    fail_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", 
            callback_data=f"demo_page_{order_id}"
        )],
        [InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç", 
            callback_data=f"back_to_bot_{order_id}"
        )]
    ])
    
    await callback.message.edit_text(
        fail_text, 
        reply_markup=fail_kb, 
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")

@order_router.callback_query(F.data.startswith("back_to_bot_"))
async def back_to_bot(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –±–æ—Ç –∏–∑ –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    order_id = callback.data.split("_")[3]
    
    await callback.message.edit_text(
        "üîô <b>–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–æ—Ç...</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–º–æ-–æ–ø–ª–∞—Ç—ã.",
        parse_mode="HTML"
    )
    await callback.answer()